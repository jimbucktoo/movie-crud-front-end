{"version":3,"sources":["assets/movieCrud.png","serviceWorker.js","components/LogoutButton.js","queries/queries.js","components/Profile.js","components/UINavbar.js","components/UIMovie.js","components/UITable.js","components/UIMain.js","components/UIAddForm.js","components/UIEditForm.js","components/UIShow.js","components/LoginButton.js","components/UIHomepage.js","index.js"],"names":["module","exports","__webpack_require__","p","Boolean","window","location","hostname","match","LogoutButton","logout","useAuth0","react_default","a","createElement","class","id","href","onClick","logoutParams","returnTo","origin","getUsersQuery","gql","_templateObject","addUserMutation","_templateObject2","_templateObject3","_templateObject4","getMoviesQuery","_templateObject5","_templateObject6","_templateObject7","_templateObject8","getMovieQuery","_templateObject9","addMovieMutation","_templateObject10","updateMovieMutation","_templateObject11","deleteMovieMutation","_templateObject12","_templateObject13","compose","graphql","name","props","_useAuth","user","isAuthenticated","isLoading","_useState","useState","_useState2","Object","slicedToArray","setRedirectToReferrer","useEffect","handleCreateUser","console","log","existingUser","users","find","email","variables","authId","sub","username","picture","refetchQueries","query","then","role","data-bs-toggle","aria-expanded","src","alt","UINavbar","className","logo","type","data-bs-target","aria-controls","aria-label","Link","to","components_Profile","aria-labelledby","components_LogoutButton","Component","UIMovie","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleDelete","bind","assertThisInitialized","event","_this2","movieList","movies","undefined","map","editLink","showLink","key","poster_url","title","directors","year","rating","UITable","components_UIMovie","data","filterDelete","UIMain","components_UINavbar","components_UITable","UIAddForm","state","redirectToReferrer","handleSubmit","preventDefault","target","value","parseInt","posterURL","setState","Redirect","onSubmit","required","placeholder","pattern","UIEditForm","params","movie","options","UIShow","LoginButton","loginWithRedirect","UIHomepage","components_LoginButton","client","ApolloClient","uri","ReactDOM","render","auth0_react_esm","domain","process","clientId","authorizationParams","redirect_uri","react_common_esm","BrowserRouter","Switch","Route","path","component","exact","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d37c4b6c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/movieCrud.a3a7187a.png\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport { useAuth0 } from \"@auth0/auth0-react\";\n\nconst LogoutButton = () => {\n    const { logout } = useAuth0();\n    return (\n        <a class=\"dropdown-item\" id=\"logout\" href=\"#\" onClick={() => logout({ logoutParams: { returnTo: window.location.origin } })}>\n            Log Out\n        </a>\n    )\n}\n\nexport default LogoutButton;\n","import { gql } from \"apollo-boost\";\n\n//User Queries & Mutations\n\nconst getUsersQuery = gql`\n    {\n        users {\n            id\n            authId\n            username\n            email\n            picture\n        }\n    }\n`;\n\nconst getUserQuery = gql`\n    query GetUser($id: ID!) {\n        user(id: $id) {\n            id\n            authId\n            username\n            email\n            picture\n        }\n    }\n`;\n\nconst getUserAuthQuery = gql`\n    query GetUserAuth($authId: String!) {\n        userAuth(authId: $authId) {\n            id\n            authId\n            username\n            email\n            picture\n        }\n    }\n`;\n\nconst addUserMutation = gql`\n    mutation (\n        $authId: String!\n        $username: String!\n        $email: String!\n        $picture: String!\n    ) {\n        addUser(\n            authId: $authId\n            username: $username\n            email: $email\n            picture: $picture\n        ) {\n            id\n            authId\n            username\n            email\n            picture\n        }\n    }\n`;\n\nconst updateUserMutation = gql`\n    mutation (\n        $id: ID!\n        $authId: String!\n        $username: String!\n        $email: String!\n        $picture: String!\n    ) {\n        updateUser(\n            id: $id\n            authId: $authId\n            username: $username\n            email: $email\n            picture: $picture\n        ) {\n            id\n            authId\n            username\n            email\n            picture\n        }\n    }\n`;\n\nconst deleteUserMutation = gql`\n    mutation ($id: ID!) {\n        deleteUser(id: $id) {\n            id\n            authId\n            username\n            email\n            picture\n        }\n    }\n`;\n\nconst deleteAllUsersMutation = gql`\n    mutation {\n        deleteAllUsers {\n            id\n            authId\n            username\n            email\n            picture\n        }\n    }\n`;\n\n//Movie Queries & Mutations\n\nconst getMoviesQuery = gql`\n    {\n        movies {\n            id\n            title\n            directors\n            year\n            rating\n            poster_url\n        }\n    }\n`;\n\nconst getMovieQuery = gql`\n    query GetMovie($id: ID!) {\n        movie(id: $id) {\n            id\n            title\n            directors\n            year\n            rating\n            poster_url\n        }\n    }\n`;\n\nconst addMovieMutation = gql`\n    mutation (\n        $title: String!\n        $directors: String!\n        $year: Int!\n        $rating: Int!\n        $poster_url: String!\n    ) {\n        addMovie(\n            title: $title\n            directors: $directors\n            year: $year\n            rating: $rating\n            poster_url: $poster_url\n        ) {\n            id\n            title\n            directors\n            year\n            rating\n            poster_url\n        }\n    }\n`;\n\nconst updateMovieMutation = gql`\n    mutation (\n        $id: ID!\n        $title: String!\n        $directors: String!\n        $year: Int!\n        $rating: Int!\n        $poster_url: String!\n    ) {\n        updateMovie(\n            id: $id\n            title: $title\n            directors: $directors\n            year: $year\n            rating: $rating\n            poster_url: $poster_url\n        ) {\n            id\n            title\n            directors\n            year\n            rating\n            poster_url\n        }\n    }\n`;\n\nconst deleteMovieMutation = gql`\n    mutation ($id: ID!) {\n        deleteMovie(id: $id) {\n            id\n            title\n            directors\n            year\n            rating\n            poster_url\n        }\n    }\n`;\n\nconst deleteAllMoviesMutation = gql`\n    mutation {\n        deleteAll {\n            id\n            title\n            directors\n            year\n            rating\n            poster_url\n        }\n    }\n`;\n\nexport {\n    getUsersQuery,\n    getUserQuery,\n    addUserMutation,\n    updateUserMutation,\n    deleteUserMutation,\n    deleteAllUsersMutation,\n    getMoviesQuery,\n    getMovieQuery,\n    addMovieMutation,\n    updateMovieMutation,\n    deleteMovieMutation,\n    deleteAllMoviesMutation,\n};\n","import React, { useEffect, useState } from \"react\";\nimport { useAuth0 } from \"@auth0/auth0-react\";\nimport { graphql } from \"react-apollo\";\nimport { getUsersQuery, addUserMutation } from \"../queries/queries\";\nimport { flowRight as compose } from \"lodash\";\n\nconst Profile = (props) => {\n    const { user, isAuthenticated, isLoading } = useAuth0();\n    const [redirectToReferrer, setRedirectToReferrer] = useState(false);\n\n    useEffect(() => {\n        if (isAuthenticated) {\n            handleCreateUser(user);\n        }\n    }, [isAuthenticated, user]);\n\n    const handleCreateUser = (user) => {\n        console.log(\"Current User:\", user);\n\n        const existingUser = props.getUsersQuery.users.find(\n            (existingUser) => existingUser.email === user.email\n        );\n\n        if (existingUser) {\n            console.log(\"Existing User:\", existingUser);\n            setRedirectToReferrer(true);\n            return;\n        }\n\n        props.addUserMutation({\n            variables: {\n                authId: user.sub,\n                username: user.name,\n                email: user.email,\n                picture: user.picture\n            },refetchQueries: [{ query: getUsersQuery }],\n        }).then(() => {setRedirectToReferrer(true)});\n    };\n\n    if (isLoading) {\n        return(\n            <div>\n                <div class=\"spinner-grow text-primary\" role=\"status\">\n                    <span class=\"visually-hidden\">Loading...</span>\n                </div>\n                <div class=\"spinner-grow text-primary\" role=\"status\">\n                    <span class=\"visually-hidden\">Loading...</span>\n                </div>\n                <div class=\"spinner-grow text-primary\" role=\"status\">\n                    <span class=\"visually-hidden\">Loading...</span>\n                </div>\n                <div class=\"spinner-grow text-primary\" role=\"status\">\n                    <span class=\"visually-hidden\">Loading...</span>\n                </div>\n                <div class=\"spinner-grow text-primary\" role=\"status\">\n                    <span class=\"visually-hidden\">Loading...</span>\n                </div>\n            </div>\n        ); \n    }\n\n    if (isAuthenticated) {\n        return (\n            <a class=\"nav-link nav-links profile dropdown-toggle\" href=\"#\" role=\"button\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\n                <img id=\"userPicture\" src={user.picture} alt={user.name} />\n                {user.name}\n            </a>\n        );\n    }\n\n    return null;\n}\n\nexport default compose(\n    graphql(getUsersQuery, { name: \"getUsersQuery\" }),\n    graphql(addUserMutation, { name: \"addUserMutation\" })\n)(Profile);\n","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport LogoutButton from \"./LogoutButton\";\nimport Profile from \"./Profile\";\nimport logo from \"../assets/movieCrud.png\";\nimport \"../style/App.css\";\n\nclass UINavbar extends Component {\n    render() {\n        return (\n            <div className=\"Navbar\">\n                <nav class=\"navbar navbar-expand-lg navBar navbar-dark bg-dark\">\n                    <div class=\"container-fluid\">\n                        <div class=\"navbar-brand navBarBrand\">\n                            <img className=\"navLogo\" alt=\"Logo\" src={logo} />\n                        </div>\n                        <button\n                        class=\"navbar-toggler\"\n                        type=\"button\"\n                        data-bs-toggle=\"collapse\"\n                        data-bs-target=\"#navbarNav\"\n                        aria-controls=\"navbarNav\"\n                        aria-expanded=\"false\"\n                        aria-label=\"Toggle navigation\">\n                        <span class=\"navbar-toggler-icon\"></span>\n                    </button>\n                    <div class=\"collapse navbar-collapse\" id=\"navbarNav\">\n                        <ul class=\"navbar-nav mr-auto\">\n                            <li class=\"nav-item\">\n                                <Link class=\"nav-link nav-links\" to=\"/main\">Movies</Link>\n                            </li>\n                            <li class=\"nav-item\">\n                                <Link class=\"nav-link nav-links\" to=\"/movies/new\">Add To List</Link>\n                            </li>\n                        </ul>\n                        <ul className=\"navbar-nav\">\n                            <li className=\"nav-item dropdown\">\n                                <Profile />\n                                <ul className=\"dropdown-menu dropdown-menu-dark\" aria-labelledby=\"navbarDropdown\">\n                                    <li><a className=\"dropdown-item\" href=\"#\">My Movies</a></li>\n                                    <li><a className=\"dropdown-item\" href=\"#\">Settings</a></li>\n                                    <li><LogoutButton /></li>\n                                </ul>\n                            </li>\n                        </ul>\n                    </div>\n                </div>\n            </nav>\n        </div>\n        );\n    }\n}\n\nexport default UINavbar;\n","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { graphql } from \"react-apollo\";\nimport { getMoviesQuery, deleteMovieMutation } from \"../queries/queries\";\nimport { flowRight as compose } from \"lodash\";\nimport \"../style/App.css\";\n\nclass UIMovie extends Component {\n    constructor(props) {\n        super(props);\n        this.handleDelete = this.handleDelete.bind(this);\n    }\n\n    handleDelete(id, event) {\n        this.props.deleteMovieMutation({\n            variables: {\n                id: id,\n            },refetchQueries: [{ query: getMoviesQuery }],\n        });\n    }\n\n    render() {\n        const movieList = this.props.getMoviesQuery.movies;\n\n        if (movieList !== undefined) {\n            return movieList.map((movies) => {\n                var editLink = \"/movies/edit/\" + movies.id;\n                var showLink = \"/movies/show/\" + movies.id;\n                return (\n                    <li key={movies.id} class=\"list-group-item d-flex justify-content-between align-items-start movie-item\">\n                        <div class=\"image-box\">\n                            <img class=\"poster-image\" alt=\"poster\" src={movies.poster_url}></img>\n                        </div>\n                        <div class=\"ms-2 me-auto\">\n                            <div class=\"movie-info\">\n                                <div class=\"fw-bold\">\n                                    <Link class=\"title\" to={showLink}>{movies.title}</Link>\n                                </div>\n                                <div>Directors: {movies.directors}</div>\n                                <div>Year: {movies.year}</div>\n                                <div>Rating: {movies.rating}</div>\n                            </div>\n                            <div class=\"movie-buttons\">\n                                <Link to={editLink} className=\"btn btn-primary button\">Edit</Link>\n                                <Link to=\"/main\" className=\"ml-5px btn btn-danger button\" onClick={this.handleDelete.bind(this, movies.id)}>Delete</Link>\n                            </div>\n                        </div>\n                    </li>\n                );\n            });\n        } else {\n            return <tr></tr>;\n        }\n    }\n}\n\nexport default compose(\n    graphql(getMoviesQuery, { name: \"getMoviesQuery\" }),\n    graphql(deleteMovieMutation, { name: \"deleteMovieMutation\" })\n)(UIMovie);\n","import React, { Component } from \"react\";\nimport UIMovie from \"./UIMovie\";\nimport \"../style/App.css\";\n\nclass UITable extends Component {\n    render() {\n        return (\n            <div className=\"table\">\n                <ul class=\"list-group movie-list\">\n                    <UIMovie data={this.props.data} filterDelete={this.props.filterDelete}/>\n                </ul>\n            </div>\n        );\n    }\n}\n\nexport default UITable;\n","import React, { Component } from \"react\";\nimport UINavbar from \"./UINavbar\";\nimport UITable from \"./UITable\";\nimport { graphql } from \"react-apollo\";\nimport { getMoviesQuery } from \"../queries/queries\";\nimport { flowRight as compose } from \"lodash\";\nimport \"../style/App.css\";\n\nclass UIMain extends Component {\n    render() {\n        const movies = this.props.getMoviesQuery.movies;\n        if (movies !== undefined) {\n            return (\n                <div className=\"App\">\n                    <UINavbar />\n                    <UITable />\n                </div>\n            );\n        }\n\n        return (\n            <div className=\"App loader\">\n                <div class=\"spinner-grow text-primary\" role=\"status\">\n                    <span class=\"visually-hidden\">Loading...</span>\n                </div>\n                <div class=\"spinner-grow text-primary\" role=\"status\">\n                    <span class=\"visually-hidden\">Loading...</span>\n                </div>\n                <div class=\"spinner-grow text-primary\" role=\"status\">\n                    <span class=\"visually-hidden\">Loading...</span>\n                </div>\n                <div class=\"spinner-grow text-primary\" role=\"status\">\n                    <span class=\"visually-hidden\">Loading...</span>\n                </div>\n                <div class=\"spinner-grow text-primary\" role=\"status\">\n                    <span class=\"visually-hidden\">Loading...</span>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default compose(graphql(getMoviesQuery, { name: \"getMoviesQuery\" }))(\n    UIMain\n);\n","import React, { Component } from \"react\";\nimport { Link, Redirect } from \"react-router-dom\";\nimport UINavbar from \"./UINavbar\";\nimport { graphql } from \"react-apollo\";\nimport { getMoviesQuery, addMovieMutation } from \"../queries/queries\";\nimport { flowRight as compose } from \"lodash\";\nimport \"../style/App.css\";\n\nclass UIAddForm extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            redirectToReferrer: false,\n        };\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n        var title = event.target.title.value;\n        var directors = event.target.directors.value;\n        var year = parseInt(event.target.year.value);\n        var rating = parseInt(event.target.rating.value);\n        var poster_url = event.target.posterURL.value;\n\n        this.props.addMovieMutation({\n            variables: {\n                title: title,\n                directors: directors,\n                year: year,\n                rating: rating,\n                poster_url: poster_url,\n            },refetchQueries: [{ query: getMoviesQuery }],\n        }).then(this.setState({ redirectToReferrer: true }));\n    }\n\n    render() {\n        const redirectToReferrer = this.state.redirectToReferrer;\n\n        if (redirectToReferrer === true) {\n            return <Redirect to=\"/main\" />;\n        }\n\n        return (\n            <div>\n                <UINavbar />\n                <div className=\"AddForm movie-add\">\n                    <form onSubmit={this.handleSubmit}>\n                        <br />\n                        <label>Add A Movie</label>\n                        <div className=\"form-group\">\n                            <input\n                            required\n                            name=\"title\"\n                            type=\"text\"\n                            className=\"form-control\"\n                            id=\"inputTitle\"\n                            placeholder=\"Title\"/>\n                        </div>\n                        <div className=\"form-group\">\n                            <input\n                            required\n                            name=\"directors\"\n                            type=\"text\"\n                            className=\"form-control\"\n                            id=\"inputDirectors\"\n                            placeholder=\"Directors\"/>\n                        </div>\n                        <div className=\"form-group\">\n                            <input\n                            required\n                            name=\"year\"\n                            type=\"text\"\n                            pattern=\"[0-9]*\"\n                            title=\"A number value is required.\"\n                            className=\"form-control\"\n                            id=\"inputYear\"\n                            placeholder=\"Year\"/>\n                        </div>\n                        <div className=\"form-group\">\n                            <input\n                            required\n                            name=\"rating\"\n                            type=\"text\"\n                            pattern=\"[0-9]*\"\n                            title=\"A number value is required.\"\n                            className=\"form-control\"\n                            id=\"inputRating\"\n                            placeholder=\"Rating\"/>\n                        </div>\n                        <div className=\"form-group\">\n                            <input\n                            required\n                            name=\"posterURL\"\n                            type=\"text\"\n                            pattern=\"https?://.+\"\n                            title=\"A valid url value is required.\"\n                            className=\"form-control\"\n                            id=\"inputPosterURL\"\n                            placeholder=\"Poster URL\"/>\n                        </div>\n                        <div class=\"movie-buttons\">\n                            <button className=\"btn btn-primary button\" type=\"submit\">Submit</button>\n                            <Link to=\"/main\" className=\"btn btn-danger button\">Cancel</Link>\n                        </div>\n                    </form>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default compose(\n    graphql(getMoviesQuery, { name: \"getMoviesQuery\" }),\n    graphql(addMovieMutation, { name: \"addMovieMutation\" })\n)(UIAddForm);\n","import React, { Component } from \"react\";\nimport { Link, Redirect } from \"react-router-dom\";\nimport UINavbar from \"./UINavbar\";\nimport { graphql } from \"react-apollo\";\nimport {\n    getMoviesQuery,\n    getMovieQuery,\n    updateMovieMutation,\n} from \"../queries/queries\";\nimport { flowRight as compose } from \"lodash\";\nimport \"../style/App.css\";\n\nclass UIEditForm extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            redirectToReferrer: false,\n        };\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n\n        const { id } = this.props.match.params;\n        var title = event.target.title.value;\n        var directors = event.target.directors.value;\n        var year = parseInt(event.target.year.value);\n        var rating = parseInt(event.target.rating.value);\n        var poster_url = event.target.posterURL.value;\n\n        this.props.updateMovieMutation({\n            variables: {\n                id: id,\n                title: title,\n                directors: directors,\n                year: year,\n                rating: rating,\n                poster_url: poster_url,\n            },refetchQueries: [{ query: getMoviesQuery }],\n        }).then(this.setState({ redirectToReferrer: true }));\n    }\n\n    render() {\n        const movie = this.props.data.movie;\n        const redirectToReferrer = this.state.redirectToReferrer;\n\n        if (redirectToReferrer === true) {\n            return <Redirect to=\"/main\" />;\n        }\n\n        if (movie !== undefined) {\n            return (\n                <div>\n                    <UINavbar />\n                    <br />\n                    <div className=\"EditForm movie-edit\">\n                        <form onSubmit={this.handleSubmit}>\n                            <h6>Edit Movie: {movie.title}</h6>\n                            <br />\n                            <img alt=\"Poster URL\" src={movie.poster_url} className=\"poster-url\"></img>\n                            <br />\n                            <br />\n                            <div className=\"form-group\">\n                                <input\n                                required\n                                name=\"title\"\n                                type=\"text\"\n                                className=\"form-control\"\n                                id=\"inputTitle\"\n                                placeholder={\"Title: \" + movie.title}/>\n                            </div>\n                            <div className=\"form-group\">\n                                <input\n                                required\n                                name=\"directors\"\n                                type=\"text\"\n                                className=\"form-control\"\n                                id=\"inputDirectors\"\n                                placeholder={\"Director(s): \" + movie.directors}/>\n                            </div>\n                            <div className=\"form-group\">\n                                <input\n                                required\n                                name=\"year\"\n                                type=\"text\"\n                                pattern=\"[0-9]*\"\n                                title=\"A number value is required.\"\n                                className=\"form-control\"\n                                id=\"inputYear\"\n                                placeholder={\"Year: \" + movie.year}/>\n                            </div>\n                            <div className=\"form-group\">\n                                <input\n                                required\n                                name=\"rating\"\n                                type=\"text\"\n                                pattern=\"[0-9]*\"\n                                title=\"A number value is required.\"\n                                className=\"form-control\"\n                                id=\"inputRating\"\n                                placeholder={\"Rating: \" + movie.rating}/>\n                            </div>\n                            <div className=\"form-group\">\n                                <input\n                                required\n                                name=\"posterURL\"\n                                type=\"text\"\n                                pattern=\"https://.+\"\n                                title=\"A valid url value is required.\"\n                                className=\"form-control\"\n                                id=\"inputPosterURL\"\n                                placeholder={\"Poster URL: \" + movie.poster_url}/>\n                            </div>\n                            <div class=\"movie-buttons\">\n                                <button className=\"btn btn-primary button\" type=\"submit\">Edit</button>\n                                <Link to=\"/main\" className=\"btn btn-danger button\">Cancel</Link>\n                            </div>\n                        </form>\n                    </div>\n                    <br />\n                    <br />\n                </div>\n            );\n        } else {\n            return (\n                <div>\n                    <UINavbar />\n                </div>\n            );\n        }\n    }\n}\n\nexport default compose(\n    graphql(getMoviesQuery, { name: \"getMoviesQuery\" }),\n    graphql(getMovieQuery, {\n        options: (props) => {\n            return {\n                variables: {\n                    id: props.match.params.id,\n                },\n            };\n        },\n    }),\n    graphql(updateMovieMutation, { name: \"updateMovieMutation\" })\n)(UIEditForm);\n","import React, { Component } from \"react\";\nimport UINavbar from \"./UINavbar\";\nimport { graphql } from \"react-apollo\";\nimport { getMovieQuery } from \"../queries/queries\";\nimport { flowRight as compose } from \"lodash\";\nimport \"../style/App.css\";\n\nclass UIShow extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        const movie = this.props.data.movie;\n\n        if (movie !== undefined) {\n            return (\n                <div>\n                    <UINavbar />\n                    <div class=\"movie-show\">\n                        <br />\n                        <img className=\"poster-url\" alt=\"Poster URL\" src={movie.poster_url}></img>\n                        <br />\n                        <br />\n                        <br />\n                        Title: {movie.title}\n                        <br />\n                        Directors: {movie.directors}\n                        <br />\n                        Year: {movie.year}\n                        <br />\n                        Rating: {movie.rating}\n                        <br />\n                        <br />\n                        <br />\n                    </div>\n                </div>\n            );\n        } else {\n            return (\n                <div>\n                    <UINavbar />\n                </div>\n            );\n        }\n    }\n}\n\nexport default compose(\n    graphql(getMovieQuery, {\n        options: (props) => {\n            return {\n                variables: {\n                    id: props.match.params.id,\n                },\n            };\n        },\n    })\n)(UIShow);\n","import React from \"react\";\nimport { useAuth0 } from \"@auth0/auth0-react\";\n\nconst LoginButton = () => {\n    const { loginWithRedirect } = useAuth0();\n    return (\n        <button className=\"btn btn-primary button\" onClick={() => loginWithRedirect()}>\n            Log In\n        </button>\n    )\n}\n\nexport default LoginButton;\n","import React, { Component } from \"react\";\nimport logo from \"../assets/movieCrud.png\";\nimport \"../style/App.css\";\nimport LoginButton from \"./LoginButton\";\n\nclass UIHomepage extends Component {\n    render() {\n        return (\n            <div className=\"container\">\n                <img className=\"logo\" alt=\"Logo\" src={logo} />\n                <h1 className=\"app-title\">MovieCrud</h1>\n                <br />\n                <LoginButton />\n            </div>\n        );\n    }\n}\n\nexport default UIHomepage;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport \"./style/index.css\";\n\nimport UIMain from \"./components/UIMain\";\nimport UIAddForm from \"./components/UIAddForm\";\nimport UIEditForm from \"./components/UIEditForm\";\nimport UIShow from \"./components/UIShow\";\nimport UIHomepage from \"./components/UIHomepage\";\n\nimport ApolloClient from \"apollo-boost\";\nimport { ApolloProvider } from \"react-apollo\";\n\nimport { Auth0Provider } from \"@auth0/auth0-react\";\n\nconst client = new ApolloClient({\n    uri: \"http://localhost:3001/graphql\",\n});\n\nconst domain = process.env.REACT_APP_AUTH0_DOMAIN;\nconst clientId = process.env.REACT_APP_AUTH0_CLIENT_ID;\n\nReactDOM.render(\n    <Auth0Provider\n    domain={domain}\n    clientId={clientId}\n    authorizationParams={{\n        redirect_uri: window.location.origin + \"/main\"\n    }}>\n    <ApolloProvider client={client}>\n        <div>\n            <BrowserRouter>\n                <Switch>\n                    <Route path=\"/movies/show/:id\" component={UIShow} />\n                    <Route path=\"/movies/edit/:id\" component={UIEditForm} />\n                    <Route path=\"/movies/new\" component={UIAddForm} />\n                    <Route path=\"/main\" component={UIMain} />\n                    <Route exact path=\"/\" component={UIHomepage} />\n                </Switch>\n            </BrowserRouter>\n        </div>\n    </ApolloProvider>\n    </Auth0Provider>,\n    document.getElementById(\"root\")\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}
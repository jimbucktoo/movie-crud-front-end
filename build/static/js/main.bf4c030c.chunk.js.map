{"version":3,"sources":["assets/movieCrud.png","serviceWorker.js","components/LoginButton.js","components/Home.js","components/LogoutButton.js","queries/queries.js","components/Profile.js","components/Navbar.js","components/Movie.js","components/MovieTable.js","components/Movies.js","components/UserMovies.js","components/AddMovie.js","components/EditMovie.js","components/ShowMovie.js","components/Settings.js","index.js"],"names":["module","exports","__webpack_require__","p","Boolean","window","location","hostname","match","LoginButton","loginWithRedirect","useAuth0","react_default","a","createElement","className","onClick","Home","alt","src","Logo","components_LoginButton","LogoutButton","logout","id","logoutParams","returnTo","origin","getUsersQuery","gql","_templateObject","getUserByAuthIdQuery","_templateObject2","_templateObject3","addUserMutation","_templateObject4","getMoviesQuery","_templateObject5","_templateObject6","_templateObject7","_templateObject8","getMoviesByUserIdQuery","_templateObject9","getMovieByIdQuery","_templateObject10","addMovieMutation","_templateObject11","updateMovieMutation","_templateObject12","deleteMovieMutation","_templateObject13","Profile","_templateObject14","props","_useAuth","user","isAuthenticated","isLoading","usersData","useQuery","data","_useMutation","useMutation","addUser","Object","slicedToArray","useEffect","handleCreateUser","users","find","existingUser","email","variables","authId","sub","username","nickname","picture","refetchQueries","query","then","catch","error","console","role","data-bs-toggle","aria-expanded","name","Navbar","logo","type","data-bs-target","aria-controls","aria-label","Link","to","components_Profile","aria-labelledby","components_LogoutButton","Movie","movieList","movies","refetchMovies","deleteMovie","map","movie","editLink","showLink","key","poster_url","title","directors","year","rating","MovieTable","components_Movie","Movies","_useQuery","moviesData","moviesRefetch","refetch","_useState","useState","_useState2","setMovies","components_Navbar","components_MovieTable","UserMovies","userMovies","setUserMovies","userData","_useQuery2","userByAuthId","userMoviesData","userMoviesRefetch","moviesByUserId","AddMovie","redirectToReferrer","setRedirectToReferrer","addMovie","Redirect","onSubmit","event","preventDefault","target","value","parseInt","posterURL","user_id","required","placeholder","pattern","history","goBack","EditMovie","updateMovie","params","movieData","movieById","ShowMovie","Settings","client","ApolloClient","uri","cache","InMemoryCache","ReactDOM","render","auth0_react_esm","domain","process","clientId","authorizationParams","redirect_uri","ApolloProvider","BrowserRouter","Switch","Route","path","component","exact","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bf4c030c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/movieCrud.a3a7187a.png\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport { useAuth0 } from \"@auth0/auth0-react\";\n\nconst LoginButton = () => {\n    const { loginWithRedirect } = useAuth0();\n    return (\n        <button className=\"btn btn-primary button\" onClick={() => loginWithRedirect()}>\n            Log In\n        </button>\n    )\n}\n\nexport default LoginButton;\n","import React from \"react\";\nimport Logo from \"../assets/movieCrud.png\";\nimport LoginButton from \"./LoginButton\";\nimport \"../style/style.css\";\n\nconst Home = () => {\n    return (\n        <div className=\"container\">\n            <img className=\"logo\" alt=\"MovieCrud Logo\" src={Logo} />\n            <h1 className=\"app-title\">MovieCrud</h1>\n            <LoginButton />\n        </div>\n    );\n};\n\nexport default Home;\n","import React from \"react\";\nimport { useAuth0 } from \"@auth0/auth0-react\";\n\nconst LogoutButton = () => {\n    const { logout } = useAuth0();\n    return (\n        <button className=\"dropdown-item\" id=\"logout\" onClick={() => logout({ logoutParams: { returnTo: window.location.origin } })}>\n            Log Out\n        </button>\n    )\n}\n\nexport default LogoutButton;\n","import { gql } from '@apollo/client';\n\n//User Queries & Mutations\n\nconst getUsersQuery = gql`\n    {\n        users {\n            id\n            authId\n            username\n            email\n            picture\n        }\n    }\n`;\n\nconst getUserByIdQuery = gql`\n    query GetUserById($id: ID!) {\n        userById(id: $id) {\n            id\n            authId\n            username\n            email\n            picture\n        }\n    }\n`;\n\nconst getUserByAuthIdQuery = gql`\n    query GetUserByAuthId($authId: String!) {\n        userByAuthId(authId: $authId) {\n            id\n            authId\n            username\n            email\n            picture\n        }\n    }\n`;\n\nconst addUserMutation = gql`\n    mutation (\n        $authId: String!\n        $username: String!\n        $email: String!\n        $picture: String!\n    ) {\n        addUser(\n            authId: $authId\n            username: $username\n            email: $email\n            picture: $picture\n        ) {\n            id\n            authId\n            username\n            email\n            picture\n        }\n    }\n`;\n\nconst updateUserMutation = gql`\n    mutation (\n        $id: ID!\n        $authId: String!\n        $username: String!\n        $email: String!\n        $picture: String!\n    ) {\n        updateUser(\n            id: $id\n            authId: $authId\n            username: $username\n            email: $email\n            picture: $picture\n        ) {\n            id\n            authId\n            username\n            email\n            picture\n        }\n    }\n`;\n\nconst deleteUserMutation = gql`\n    mutation ($id: ID!) {\n        deleteUser(id: $id) {\n            id\n            authId\n            username\n            email\n            picture\n        }\n    }\n`;\n\nconst deleteAllUsersMutation = gql`\n    mutation {\n        deleteAllUsers {\n            id\n            authId\n            username\n            email\n            picture\n        }\n    }\n`;\n\n//Movie Queries & Mutations\n\nconst getMoviesQuery = gql`\n    {\n        movies {\n            id\n            title\n            directors\n            year\n            rating\n            poster_url\n        }\n    }\n`;\n\nconst getMoviesByUserIdQuery = gql`\n    query GetMoviesByUserId($id: ID!) {\n        moviesByUserId(id: $id) {\n            id\n            title\n            directors\n            year\n            rating\n            poster_url\n        }\n    }\n`;\n\nconst getMovieByIdQuery = gql`\n    query GetMovieById($id: ID!) {\n        movieById(id: $id) {\n            id\n            title\n            directors\n            year\n            rating\n            poster_url\n        }\n    }\n`;\n\nconst addMovieMutation = gql`\n    mutation (\n        $title: String!\n        $directors: String!\n        $year: Int!\n        $rating: Int!\n        $poster_url: String!\n        $user_id: Int!\n    ) {\n        addMovie(\n            title: $title\n            directors: $directors\n            year: $year\n            rating: $rating\n            poster_url: $poster_url\n            user_id: $user_id\n        ) {\n            id\n            title\n            directors\n            year\n            rating\n            poster_url\n            user_id\n        }\n    }\n`;\n\nconst updateMovieMutation = gql`\n    mutation (\n        $id: ID!\n        $title: String!\n        $directors: String!\n        $year: Int!\n        $rating: Int!\n        $poster_url: String!\n    ) {\n        updateMovie(\n            id: $id\n            title: $title\n            directors: $directors\n            year: $year\n            rating: $rating\n            poster_url: $poster_url\n        ) {\n            id\n            title\n            directors\n            year\n            rating\n            poster_url\n        }\n    }\n`;\n\nconst deleteMovieMutation = gql`\n    mutation ($id: ID!) {\n        deleteMovie(id: $id) {\n            id\n            title\n            directors\n            year\n            rating\n            poster_url\n        }\n    }\n`;\n\nconst deleteAllMoviesMutation = gql`\n    mutation {\n        deleteAll {\n            id\n            title\n            directors\n            year\n            rating\n            poster_url\n        }\n    }\n`;\n\nexport {\n    getUsersQuery,\n    getUserByIdQuery,\n    getUserByAuthIdQuery,\n    addUserMutation,\n    updateUserMutation,\n    deleteUserMutation,\n    deleteAllUsersMutation,\n    getMoviesQuery,\n    getMoviesByUserIdQuery,\n    getMovieByIdQuery,\n    addMovieMutation,\n    updateMovieMutation,\n    deleteMovieMutation,\n    deleteAllMoviesMutation,\n};\n","import React, { useEffect } from \"react\";\nimport { useAuth0 } from \"@auth0/auth0-react\";\nimport { useQuery, useMutation } from '@apollo/client';\nimport { getUsersQuery, addUserMutation } from '../queries/queries';\n\nconst Profile = (props) => {\n    const { user, isAuthenticated, isLoading } = useAuth0();\n    const { data: usersData } = useQuery(getUsersQuery);\n    const [ addUser ] = useMutation(addUserMutation);\n\n    useEffect(() => {\n        if (isAuthenticated) {\n            handleCreateUser(user);\n        }\n    }, [isAuthenticated, user]);\n\n    const handleCreateUser = (user) => {\n        if (usersData) {\n            const existingUser = usersData.users.find(\n                (existingUser) => existingUser.email === user.email\n            );\n\n            if (existingUser) {\n                return;\n            } else {\n                addUser({\n                    variables: {\n                        authId: user.sub,\n                        username: user.nickname,\n                        email: user.email,\n                        picture: user.picture\n                    },\n                    refetchQueries: [{ query: getUsersQuery }]\n                }).then(() => {}).catch((error) => {\n                    console.error(\"Error Adding User: \", error);\n                });\n            }\n        }\n    };\n\n    if (isLoading) {\n        return (\n            <div>\n                <div className=\"spinner-grow text-primary\" role=\"status\">\n                    <span className=\"visually-hidden\">Loading...</span>\n                </div>\n                <div className=\"spinner-grow text-primary\" role=\"status\">\n                    <span className=\"visually-hidden\">Loading...</span>\n                </div>\n                <div className=\"spinner-grow text-primary\" role=\"status\">\n                    <span className=\"visually-hidden\">Loading...</span>\n                </div>\n                <div className=\"spinner-grow text-primary\" role=\"status\">\n                    <span className=\"visually-hidden\">Loading...</span>\n                </div>\n                <div className=\"spinner-grow text-primary\" role=\"status\">\n                    <span className=\"visually-hidden\">Loading...</span>\n                </div>\n            </div>\n        );\n    }\n\n    if (isAuthenticated) {\n        return (\n            <div className=\"nav-link nav-links Profile dropdown-toggle\" role=\"button\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\n                <img id=\"userPicture\" src={user.picture} alt={user.name} />\n                {user.name}\n            </div>\n        );\n    }\n\n    return null;\n};\n\nexport default Profile;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport LogoutButton from \"./LogoutButton\";\nimport Profile from \"./Profile\";\nimport logo from \"../assets/movieCrud.png\";\nimport \"../style/style.css\";\n\nconst Navbar = () => {\n    return (\n        <div className=\"Navbar\">\n            <nav className=\"navbar navbar-expand-lg navBar navbar-dark bg-dark\">\n                <div className=\"container-fluid\">\n                    <div className=\"navbar-brand navBarBrand\">\n                        <img className=\"navLogo\" alt=\"Logo\" src={logo} />\n                    </div>\n                    <button\n                    className=\"navbar-toggler\"\n                    type=\"button\"\n                    data-bs-toggle=\"collapse\"\n                    data-bs-target=\"#navbarNav\"\n                    aria-controls=\"navbarNav\"\n                    aria-expanded=\"false\"\n                    aria-label=\"Toggle navigation\">\n                    <span className=\"navbar-toggler-icon\"></span>\n                </button>\n                <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\n                    <ul className=\"navbar-nav mr-auto\">\n                        <li className=\"nav-item\">\n                            <Link className=\"nav-link nav-links\" to=\"/movies\">\n                                Movies\n                            </Link>\n                        </li>\n                        <li className=\"nav-item\">\n                            <Link className=\"nav-link nav-links\" to=\"/movies/add\">\n                                Add To List\n                            </Link>\n                        </li>\n                    </ul>\n                    <ul className=\"navbar-nav\">\n                        <li className=\"nav-item dropdown\">\n                            <Profile />\n                            <ul className=\"dropdown-menu dropdown-menu-dark\" aria-labelledby=\"navbarDropdown\">\n                                <li>\n                                    <Link className=\"dropdown-item\" to=\"/movies/userMovies\">\n                                        My Movies\n                                    </Link>\n                                </li>\n                                <li>\n                                    <Link className=\"dropdown-item\" to=\"/settings\">\n                                        Settings\n                                    </Link>\n                                </li>\n                                <li>\n                                    <LogoutButton />\n                                </li>\n                            </ul>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n    </div>\n    );\n};\n\nexport default Navbar;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useMutation } from '@apollo/client';\nimport { getMoviesQuery, getMoviesByUserIdQuery, deleteMovieMutation } from '../queries/queries';\nimport \"../style/style.css\";\n\nconst Movie = (props) => {\n    const { movieList, movies, refetchMovies } = props;\n    const [deleteMovie ] = useMutation(deleteMovieMutation);\n\n    const handleDelete = (id) => {\n        deleteMovie({\n            variables: {\n                id: id\n            },\n            refetchQueries: [\n                { query: getMoviesQuery },\n                { query: getMoviesByUserIdQuery }\n            ],\n        }).then(() => refetchMovies());\n    };\n\n    if (movies) {\n        return movies.map((movie) => {\n            const editLink = \"/movies/edit/\" + movie.id;\n            const showLink = \"/movies/show/\" + movie.id;\n            return (\n                <li key={movie.id} className=\"list-group-item d-flex justify-content-between align-items-start movie-item\">\n                    <div className=\"image-container\">\n                        <img className=\"movie-poster\" alt=\"poster\" src={movie.poster_url} />\n                    </div>\n                    <div className=\"ms-2 me-auto\">\n                        <div className=\"movie-info\">\n                            <div className=\"fw-bold\">\n                                <Link className=\"movie-title\" to={showLink}>{movie.title}</Link>\n                            </div>\n                            <div>Directors: {movie.directors}</div>\n                            <div>Year: {movie.year}</div>\n                            <div>Rating: {movie.rating}</div>\n                        </div>\n                        <div className=\"movie-buttons\">\n                            <Link to={editLink} className=\"btn btn-primary movie-button\">Edit</Link>\n                            <Link to={movieList} className=\"ml-5px btn btn-danger movie-button\" onClick={() => handleDelete(movie.id)}>Delete</Link>\n                        </div>\n                    </div>\n                </li>\n            );\n        });\n    } else {\n        return null;\n    }\n};\n\nexport default Movie;\n","import React from \"react\";\nimport Movie from \"./Movie\";\nimport \"../style/style.css\";\n\nconst MovieTable = (props) => {\n    return (\n        <div className=\"movie-table\">\n            <ul className=\"list-group movie-list\">\n                <Movie movieList={props.movieList} movies={props.movies} refetchMovies={props.refetchMovies}/>\n            </ul>\n        </div>\n    );\n};\n\nexport default MovieTable;\n","import React, { useState, useEffect } from \"react\";\nimport Navbar from \"./Navbar\";\nimport MovieTable from \"./MovieTable\";\nimport { useQuery } from '@apollo/client';\nimport { getMoviesQuery } from '../queries/queries';\nimport \"../style/style.css\";\n\nconst Movies = (props) => {\n    const { data: moviesData, refetch: moviesRefetch } = useQuery(getMoviesQuery);\n    const [movies, setMovies] = useState(null);\n\n    useEffect(() => {\n        if (moviesData) {\n            setMovies(moviesData.movies);\n        }\n    }, [moviesData]);\n\n    if (moviesData != null) {\n        const movieList = \"/movies\";\n        return (\n            <div>\n                <Navbar />\n                <MovieTable movieList={movieList} movies={movies} refetchMovies={moviesRefetch}/>\n            </div>\n        );\n    }\n\n    return (\n        <div className=\"loader\">\n            <div className=\"spinner-grow text-primary\" role=\"status\">\n                <span className=\"visually-hidden\">Loading...</span>\n            </div>\n            <div className=\"spinner-grow text-primary\" role=\"status\">\n                <span className=\"visually-hidden\">Loading...</span>\n            </div>\n            <div className=\"spinner-grow text-primary\" role=\"status\">\n                <span className=\"visually-hidden\">Loading...</span>\n            </div>\n            <div className=\"spinner-grow text-primary\" role=\"status\">\n                <span className=\"visually-hidden\">Loading...</span>\n            </div>\n            <div className=\"spinner-grow text-primary\" role=\"status\">\n                <span className=\"visually-hidden\">Loading...</span>\n            </div>\n        </div>\n    );\n};\n\nexport default Movies;\n","import React, { useState, useEffect } from \"react\";\nimport Navbar from \"./Navbar\";\nimport MovieTable from \"./MovieTable\";\nimport { useAuth0 } from \"@auth0/auth0-react\";\nimport { useQuery } from '@apollo/client';\nimport { getMoviesByUserIdQuery, getUserByAuthIdQuery } from '../queries/queries';\nimport \"../style/style.css\";\n\nconst UserMovies = (props) => {\n    const { user, isAuthenticated } = useAuth0();\n    const [userMovies, setUserMovies] = useState(null);\n    const { data: userData } = useQuery(getUserByAuthIdQuery, {\n        variables: {\n            authId: isAuthenticated ? user.sub : null\n        }\n    });\n    const { data: userMoviesData, refetch: userMoviesRefetch } = useQuery(getMoviesByUserIdQuery, {\n        variables: {\n            id: userData ? userData.userByAuthId.id : null\n        }\n    });\n\n    useEffect(() => {\n        if (userMoviesData) {\n            setUserMovies(userMoviesData.moviesByUserId);\n        }\n    }, [userMoviesData]);\n\n    if (userMoviesData != null) {\n        const movieList = \"/movies/userMovies\";\n        return (\n            <div>\n                <Navbar />\n                <MovieTable movieList={movieList} movies={userMovies} refetchMovies={userMoviesRefetch}/>\n            </div>\n        );\n    }\n\n    return (\n        <div className=\"loader\">\n            <div className=\"spinner-grow text-primary\" role=\"status\">\n                <span className=\"visually-hidden\">Loading...</span>\n            </div>\n            <div className=\"spinner-grow text-primary\" role=\"status\">\n                <span className=\"visually-hidden\">Loading...</span>\n            </div>\n            <div className=\"spinner-grow text-primary\" role=\"status\">\n                <span className=\"visually-hidden\">Loading...</span>\n            </div>\n            <div className=\"spinner-grow text-primary\" role=\"status\">\n                <span className=\"visually-hidden\">Loading...</span>\n            </div>\n            <div className=\"spinner-grow text-primary\" role=\"status\">\n                <span className=\"visually-hidden\">Loading...</span>\n            </div>\n        </div>\n    );\n};\n\nexport default UserMovies;\n","import React, { useState } from \"react\";\nimport { Link, Redirect } from \"react-router-dom\";\nimport Navbar from \"./Navbar\";\nimport { useAuth0 } from \"@auth0/auth0-react\";\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { getMoviesQuery, getUserByAuthIdQuery, addMovieMutation } from \"../queries/queries\";\nimport \"../style/style.css\";\n\nconst AddMovie = (props) => {\n    const goBack = () => {\n        props.history.goBack();\n    };\n    const { user, isAuthenticated } = useAuth0();\n    const [redirectToReferrer, setRedirectToReferrer] = useState(false);\n    const [ addMovie ] = useMutation(addMovieMutation);\n    const { data: userData } = useQuery(getUserByAuthIdQuery, {\n        variables: {\n            authId: isAuthenticated ? user.sub : null\n        }\n    });\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        const title = event.target.title.value;\n        const directors = event.target.directors.value;\n        const year = parseInt(event.target.year.value);\n        const rating = parseInt(event.target.rating.value);\n        const poster_url = event.target.posterURL.value;\n        const user_id = userData.userByAuthId.id;\n\n        addMovie({\n            variables: {\n                title: title,\n                directors: directors,\n                year: year,\n                rating: rating,\n                poster_url: poster_url,\n                user_id: user_id\n            },\n            refetchQueries: [{ query: getMoviesQuery }]\n        }).then(() => {}).catch((error) => {\n            console.error(\"Error Adding Movie: \", error);\n        }).then(() => setRedirectToReferrer(true));\n    };\n\n    if (redirectToReferrer) {\n        return <Redirect to=\"/movies\" />;\n    }\n\n    if(isAuthenticated) {\n        return (\n            <div>\n                <Navbar />\n                <div className=\"AddMovie\">\n                    <h3 className=\"heading\">Add Movie:</h3>\n                    <form onSubmit={handleSubmit}>\n                        <div className=\"form-group\">\n                            <input\n                            required\n                            name=\"title\"\n                            type=\"text\"\n                            className=\"form-control\"\n                            id=\"inputTitle\"\n                            placeholder=\"Title\"/>\n                        </div>\n                        <div className=\"form-group\">\n                            <input\n                            required\n                            name=\"directors\"\n                            type=\"text\"\n                            className=\"form-control\"\n                            id=\"inputDirectors\"\n                            placeholder=\"Directors\"/>\n                        </div>\n                        <div className=\"form-group\">\n                            <input\n                            required\n                            name=\"year\"\n                            type=\"text\"\n                            pattern=\"[0-9]*\"\n                            title=\"A number value is required.\"\n                            className=\"form-control\"\n                            id=\"inputYear\"\n                            placeholder=\"Year\"/>\n                        </div>\n                        <div className=\"form-group\">\n                            <input\n                            required\n                            name=\"rating\"\n                            type=\"text\"\n                            pattern=\"[0-9]*\"\n                            title=\"A number value is required.\"\n                            className=\"form-control\"\n                            id=\"inputRating\"\n                            placeholder=\"Rating\"/>\n                        </div>\n                        <div className=\"form-group\">\n                            <input\n                            required\n                            name=\"posterURL\"\n                            type=\"text\"\n                            pattern=\"https?://.+\"\n                            title=\"A valid URL value is required.\"\n                            className=\"form-control\"\n                            id=\"inputPosterURL\"\n                            placeholder=\"Poster URL\"/>\n                        </div>\n                        <div className=\"movie-buttons\">\n                            <button className=\"btn btn-primary movie-button\" type=\"submit\">\n                                Submit\n                            </button>\n                            <Link to=\"#\" className=\"btn btn-danger movie-button\" onClick={goBack}>\n                                Cancel\n                            </Link>\n                        </div>\n                    </form>\n                </div>\n            </div>\n        );\n    } else {\n        return(\n            <div>\n                <Navbar />\n            </div>\n        );\n    }\n};\n\nexport default AddMovie;\n","import React, { useState } from \"react\";\nimport { Link, Redirect } from \"react-router-dom\";\nimport Navbar from \"./Navbar\";\nimport { useQuery, useMutation } from '@apollo/client';\nimport { getMoviesQuery, getMovieByIdQuery, updateMovieMutation } from \"../queries/queries\";\nimport \"../style/style.css\";\n\nconst EditMovie = (props) => {\n    const goBack = () => {\n        props.history.goBack();\n    };\n    const [redirectToReferrer, setRedirectToReferrer] = useState(false);\n    const [ updateMovie ] = useMutation(updateMovieMutation);\n    const { id } = props.match.params;\n    const { data: movieData } = useQuery(getMovieByIdQuery, {\n        variables: {\n            id: id ? id : null\n        }\n    });\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n\n        const title = event.target.title.value;\n        const directors = event.target.directors.value;\n        const year = parseInt(event.target.year.value);\n        const rating = parseInt(event.target.rating.value);\n        const poster_url = event.target.posterURL.value;\n\n        updateMovie({\n            variables: {\n                id: id,\n                title: title,\n                directors: directors,\n                year: year,\n                rating: rating,\n                poster_url: poster_url\n            },\n            refetchQueries: [{ query: getMoviesQuery }]\n        }).then(() => {}).catch((error) => {\n            console.error(\"Error Updating Movie: \", error);\n        }).then(() => setRedirectToReferrer(true));\n    };\n\n    if (redirectToReferrer) {\n        return <Redirect to=\"/movies\" />;\n    }\n\n    if(movieData != null) {\n        const movie = movieData.movieById;\n        return (\n            <div>\n                <Navbar />\n                <div className=\"EditMovie\">\n                    <h3 className=\"heading\">Edit Movie: {movie.title}</h3>\n                    <img alt=\"Poster\" src={movie.poster_url} className=\"poster\" />\n                    <form onSubmit={handleSubmit}>\n                        <div className=\"form-group\">\n                            <input\n                            required\n                            name=\"title\"\n                            type=\"text\"\n                            className=\"form-control\"\n                            id=\"inputTitle\"\n                            placeholder={\"Title: \" + movie.title}/>\n                        </div>\n                        <div className=\"form-group\">\n                            <input\n                            required\n                            name=\"directors\"\n                            type=\"text\"\n                            className=\"form-control\"\n                            id=\"inputDirectors\"\n                            placeholder={\"Director(s): \" + movie.directors}/>\n                        </div>\n                        <div className=\"form-group\">\n                            <input\n                            required\n                            name=\"year\"\n                            type=\"text\"\n                            pattern=\"[0-9]*\"\n                            title=\"A number value is required.\"\n                            className=\"form-control\"\n                            id=\"inputYear\"\n                            placeholder={\"Year: \" + movie.year}/>\n                        </div>\n                        <div className=\"form-group\">\n                            <input\n                            required\n                            name=\"rating\"\n                            type=\"text\"\n                            pattern=\"[0-9]*\"\n                            title=\"A number value is required.\"\n                            className=\"form-control\"\n                            id=\"inputRating\"\n                            placeholder={\"Rating: \" + movie.rating}/>\n                        </div>\n                        <div className=\"form-group\">\n                            <input\n                            required\n                            name=\"posterURL\"\n                            type=\"text\"\n                            pattern=\"https://.+\"\n                            title=\"A valid URL value is required.\"\n                            className=\"form-control\"\n                            id=\"inputPosterURL\"\n                            placeholder={\"Poster URL: \" + movie.poster_url}/>\n                        </div>\n                        <div className=\"movie-buttons\">\n                            <button className=\"btn btn-primary movie-button\" type=\"submit\">\n                                Edit\n                            </button>\n                            <Link to=\"#\" className=\"btn btn-danger movie-button\" onClick={goBack}>\n                                Cancel\n                            </Link>\n                        </div>\n                    </form>\n                </div>\n            </div>\n        );\n    } else {\n        return (\n            <div>\n                <Navbar />\n            </div>\n        );\n    }\n\n};\n\nexport default EditMovie;\n","import React from \"react\";\nimport Navbar from \"./Navbar\";\nimport { useQuery } from '@apollo/client';\nimport { getMovieByIdQuery } from \"../queries/queries\";\nimport \"../style/style.css\";\n\nconst ShowMovie = (props) => {\n    const { id } = props.match.params;\n    const { data: movieData } = useQuery(getMovieByIdQuery, {\n        variables: {\n            id: id ? id : null\n        }\n    });\n\n    if (movieData != null) {\n        const movie = movieData.movieById;\n        return (\n            <div>\n                <Navbar />\n                <div className=\"ShowMovie\">\n                    <h3 className=\"heading\">{movie.title}</h3>\n                    <img className=\"poster\" alt=\"Poster\" src={movie.poster_url} />\n                    <h6>Title: {movie.title}</h6>\n                    <h6>Directors: {movie.directors}</h6>\n                    <h6>Year: {movie.year}</h6>\n                    <h6>Rating: {movie.rating}</h6>\n                </div>\n            </div>\n        );\n    } else {\n        return (\n            <div>\n                <Navbar />\n            </div>\n        );\n    }\n};\n\nexport default ShowMovie;\n","import React from \"react\";\nimport Navbar from \"./Navbar\";\nimport \"../style/style.css\";\n\nconst Settings = () => {\n    return (\n        <div>\n            <Navbar />\n        </div>\n    );\n};\n\nexport default Settings;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport \"./style/style.css\";\n\nimport { ApolloClient, InMemoryCache, ApolloProvider } from '@apollo/client';\nimport { Auth0Provider } from \"@auth0/auth0-react\";\n\nimport Home from \"./components/Home\";\nimport Movies from \"./components/Movies\";\nimport UserMovies from \"./components/UserMovies\";\nimport AddMovie from \"./components/AddMovie\";\nimport EditMovie from \"./components/EditMovie\";\nimport ShowMovie from \"./components/ShowMovie\";\nimport Settings from \"./components/Settings\";\n\nconst client = new ApolloClient({\n    uri: \"http://localhost:3001/graphql\",\n    cache: new InMemoryCache(),\n});\n\nconst domain = process.env.REACT_APP_AUTH0_DOMAIN;\nconst clientId = process.env.REACT_APP_AUTH0_CLIENT_ID;\n\nReactDOM.render(\n    <Auth0Provider\n    domain={domain}\n    clientId={clientId}\n    authorizationParams={{\n        redirect_uri: window.location.origin + \"/movies\"\n    }}>\n    <ApolloProvider client={client}>\n        <div>\n            <BrowserRouter>\n                <Switch>\n                    <Route path=\"/settings\" component={Settings} />\n                    <Route path=\"/movies/show/:id\" component={ShowMovie} />\n                    <Route path=\"/movies/edit/:id\" component={EditMovie} />\n                    <Route path=\"/movies/add\" component={AddMovie} />\n                    <Route path=\"/movies/userMovies\" component={UserMovies} />\n                    <Route path=\"/movies\" component={Movies} />\n                    <Route exact path=\"/\" component={Home} />\n                </Switch>\n            </BrowserRouter>\n        </div>\n    </ApolloProvider>\n    </Auth0Provider>,\n    document.getElementById(\"root\")\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}